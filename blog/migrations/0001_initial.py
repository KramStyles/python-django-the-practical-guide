# Generated by Django 4.2 on 2023-04-22 21:06

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("book", "0007_author_email_address_alter_book_published_countries"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("caption", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=250)),
                ("excerpt", models.CharField(blank=True, max_length=150)),
                ("image_name", models.CharField(max_length=250)),
                ("slug", models.SlugField(blank=True, unique=True)),
                (
                    "content",
                    models.TextField(
                        validators=[django.core.validators.MinLengthValidator(10)]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="book.author",
                    ),
                ),
                ("tags", models.ManyToManyField(to="blog.tag")),
            ],
        ),
    ]
